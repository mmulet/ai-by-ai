
doctype html
template 
  span version-1.0
html(lang="en")
  head
    include head.pug
    title="AI-by-AI"
    link(rel="stylesheet", href="/code/index.css")
    style.
      @font-face {
        font-family: 'ChiKareGo2';
        src: url('/static/ChiKareGo2.ttf');
      }
      @font-face {
        font-family: 'karen2mono';
        src: url('/static/karen2mono.ttf');
      }
        @font-face {
        font-family: 'trueitalicWIP';
        src: url('/static/trueitalicWIP.ttf');
      }
      @font-face {
        font-family: 'frak';
        src: url('/static/PixelFraktur.ttf');
      }
      @font-face {
        font-family: 'Mademoiselle';
        src: url('/static/Mademoiselle.ttf');
      }
      #terminal {
        color: #e4ad39; 
        padding: 10px;
        margin-top: 10px;
        height: 168px;
        width: 265px; 
        font-family: karen2mono, monospace; 
        position: absolute;
        top: 256px;
        left: 113px;
        display: flex;
        flex-flow: column
      }
      .terminal-text {
        resize: none;
        border: none;
        outline: none;
        background-color: black; 
        color: #e4ad39;
        width: 100%;

      }
      .box {
        align-items: center;
        border: 1px solid #e4ad39;
        border-radius: 15px;
        padding: 15px;
        margin: 10px;
        color: #e4ad39;
        max-width: 80%;
      }
      @media (min-width: 600px) {
        .box {
          max-width: 50%;
          padding: 20px

        }
      }
      a {
        color: #559cd5;
      }
      .fancy {
        font-family: frak;
        font-size: 20px;
         color: #e4ad39;
      }
      .handwritten {
        font-family: trueitalicWIP;
        font-size: 30px;
      }
      .cursive{
        font-family: Mademoiselle;
        font-size: 30px;
      }
      pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{background:#1e1e1e;color:#dcdcdc}.hljs-keyword,.hljs-literal,.hljs-name,.hljs-symbol{color:#569cd6}.hljs-link{color:#569cd6;text-decoration:underline}.hljs-built_in,.hljs-type{color:#4ec9b0}.hljs-class,.hljs-number{color:#b8d7a3}.hljs-meta .hljs-string,.hljs-string{color:#d69d85}.hljs-regexp,.hljs-template-tag{color:#9a5334}.hljs-formula,.hljs-function,.hljs-params,.hljs-subst,.hljs-title{color:#dcdcdc}.hljs-comment,.hljs-quote{color:#57a64a;font-style:italic}.hljs-doctag{color:#608b4e}.hljs-meta,.hljs-meta .hljs-keyword,.hljs-tag{color:#9b9b9b}.hljs-template-variable,.hljs-variable{color:#bd63c5}.hljs-attr,.hljs-attribute{color:#9cdcfe}.hljs-section{color:gold}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-bullet,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-selector-pseudo,.hljs-selector-tag{color:#d7ba7d}.hljs-addition{background-color:#144212;display:inline-block;width:100%}.hljs-deletion{background-color:#600;display:inline-block;width:100%}
      code {
        font-family: karen2mono;
        font-size: 20px;
      }
      
      .header-anchor {
        color: #e4ad39;
        font-size: 30px;
      }
     

      button {
        background-color: #e4ad39;
        color: black;
        border: none;
      }
      body {
        font-family: ChiKareGo2;
      }
      .computer-image {
        max-width: 100%;
        position: relative;
      }

      #computer-screen {
        font-family: ChiKareGo2;
        position: absolute;
        left: 45px;
        top: 50px;
        width: 400px;
        height: 360px;
        display: flex;
        flex-flow: column;
        color: black;
      }
      .top-bar {
        background-color:  #e8bc5f;
        display: flex;
        flex-flow: row;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
      }
      .top-bar-item button {
        background-color: #e8bc5f;
        color: black;
        border: none;
        padding: 1px;
        margin-left: 5px;
        margin-right: 5px;
      }
      .desktop {
        //- background-color: #BDBDBD;
        background-color: #d1920a;
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        padding: 10px;
        display: flex;
        flex-flow: row;
        justify-content: center;
        align-items:center;
        flex: 1;
      }
      .window {
        width: 100%;
        border-left: 1px solid black;
        border-right: 2px solid black;
        border-bottom: 2px solid black;
        border-top: 1px solid black;
        border-top-right-radius: 4px;
        border-bottom-left-radius: 4px;

      }
      .window-title {
        background-color: #e8bc5f;
        display: flex;
        flex-flow: row;
        border-bottom: 2px solid black;
      }
      .window-title-lines {
        flex: 1;
      }
      .window-title-line{
        height: 1px;
        width: 100%;
        margin-bottom: 1px;
        //- background-color: #BDBDBD;
        background-color: #d39308;
      }
      .window-title-text {
        margin-left: 5px;
        margin-right: 5px;
      }
      .window-content {
        background-color: #e8bc5f;
        padding: 10px;
      }
      .computer-button {
        display: flex;
        flex-flow: row;
        justify-content: center;
        align-items: center;
        background-color: #e8bc5f;
        padding: 5px;
        border: 1px solid black;
        border-radius: 5px;
      }
      .computer-button:active{
        background-color: black;
        color: #e8bc5f;
      }
      #call {
        display:flex;
        flex-flow: column;
        justify-content: center;
        align-items: center;
      }
      #video {
        border: 1px solid black;
        display: block;
      }
      #transcript {
        border: 1px solid black;
        display: block;
        width: 256px;
        overflow-y: scroll;
        height: 100px;
        padding: 5px;
      }
      .fast-word-box {
        display:flex;
        flex-flow: row;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 75px;
      }
      #input {
        width: 100%;
        background-color: #e8bc5f;
      }

      .signature {
        font-size: 50px;
        font-family: Mademoiselle;
        color: #e4ad39;
      }
      .main-title {
        color: #e4ad39;
        font-size: 50px;

      }
      hr {
        border: 1px solid #e4ad39;
      }
      .dash {
        border: 1px dashed #e4ad39;
      }
     

      
     
     

  body
    img(src="/static/logo0001.png" style="max-width: 100%;" width=512 height=256 alt="Michael Mulet's ai-by-ai logo")
    .box
      :markdown
        ## Welcome to "*ai-by-ai.com*"
        This is the site where I make AI that makes AI.

        ----

        I'm Michael Mulet, I'm currently working on a project called
        "ai-by-ai" where I use Artificial Intelligence to make Artificial Intelligence.

        Just below, you'll find the first of these AI. I've named it Spudmund Freud. It is 
        a chatbot based on the mother of all chatbots, [ELIZA](https://en.wikipedia.org/wiki/ELIZA).

        ELIZA is not as smart as today's AI models. All of its responses are pre-written.
        What makes Spudmund Freud different is that it uses a neural network to generate both it's patterns and responses,
        all *1,000,000* of them. It's ELIZA on a scale never seen before*

        Try it out below! Spudmund Freud will play the part of a "RoboTherapist", asking about your feelings and your problems, but do keep in mind that this is not a real therapist. Afterwords, read on to learn more about the project and what makes it work. 
        
      hr(class="dash")
      :markdown
        *If anyone knows of a larger ELIZA, [please let me know](https://www.github.com/mmulet/ai-by-ai/issues), 
        I'll scale this one up to match it.

        Source on [Github](https://www.github.com/mmulet/ai-by-ai)


    
    .computer-image
      img(id="computer" style="max-width: 100%;" width=512 height=1024 src="/static/long_computer0001.png")
      #computer-screen
        .top-bar
          .top-bar-item
            button(id="file-button") File
          .top-bar-item 
            button(id="edit-button") Edit
          .top-bar-item 
            button(id="view-button") View
          .top-bar-item 
            button(id="label-button") Label
          .top-bar-item 
            button(id="special-button") Special
        .desktop
          .window
            .window-title
              .window-title-lines
                .window-title-line(style="margin-top: 4px;")
                .window-title-line
                .window-title-line
                .window-title-line
                .window-title-line(style="margin-bottom: 2px;")
              .window-title-text Video Call
              .window-title-lines
                .window-title-line(style="margin-top: 4px;")
                .window-title-line
                .window-title-line
                .window-title-line
                .window-title-line(style="margin-bottom: 2px;")

            .window-content
              #answer-call(style="display: none;")
                div Incoming call from "Spudmund Freud"
                .computer-button(id="start-call") Start Call
              #call
                div Spudmund Freud:
                  canvas(id="video" width=256 height=256)
                  div Transcript:
                  #transcript
                  .fast-word-box text speed:
                    .computer-button(id="speed-button") 1x
                div
                  label(for="input") Type below to send a message to Spudmund Freud:
                input(type="text", id="input")
                .computer-button(id="send") Send
    .box
      :plain-markdown
        Thanks for playing with the chatbot!
        If you enjoy this kind of stuff, follow me on [GitHub](https://github.com/mmulet)
        or even [sponsor](https://github.com/sponsors/mmulet) if you want to support my work.

        Check out my other stuff:
        - [Hack-Words](https://hack-words.com) - An in-browser demo of compressed sensing presented as a riddle game.
        - [JellyML](https://jellyml.com) - A tool for repeatable machine learning experiments
        - [Fontemon](https://www.coderelay.io/fontemon.html) - A pokemon parody in a font
        - [Code Relay](https://www.coderelay.io) - A crowdsourced coding site.
    .box
      :markdown
        ## How and why
        Michael Mulet - March 02, 2023

        One of the main reasons we have usable A.I. today is because 
        of the observation in the early 2010s that we could use GPUs
        for parallel processing, which greatly accelerated the speed of deep learning algorithms.
        This breakthrough allowed researchers to train much larger and more complex models in a reasonable amount of time, 
        leading to significant advances in computer vision, natural language processing, and other areas of AI.
        The current trend is, the larger and more complex the model, the better it performs. In other words,
        the deep learning models scale up very well.

        The point of "ai-by-ai" is to use modern deep learning techniques to revisit the old school A.I. field.
        Things that were once considered impossible,
        like making chatbot with a 1,000,000 hand-coded responses in a day, are now possible. So, I'm starting with ELIZA,
        one of the first chatbots, and scaling it up, just to see what happens.
        Here's how I did it:

        #### First Stage: ChatGPT
        First, I prompted ChatGPT to generate a javascript version ELIZA. The whole
        point of this site is "ai-by-ai", so I wanted the A.I. to generate as much code as possible. Here is my 
        exact prompt and response 
        ```
        Make a javascript version of the famous ELIZA chatbot
        ```
        Predictably, it said "sure", and produced a short biography of ELIZA and this code: 
        ```javascript
        const eliza = {
          patterns: [
            { pattern: /hello/i, response: ["Hello!", "Hi there!"] },
            { pattern: /how are you/i, response: ["I'm doing well, thank you for asking.", "I'm fine, thanks for asking."] },
            { pattern: /what is your name/i, response: ["My name is ELIZA.", "I'm ELIZA."] },
            { pattern: /i am (.*)/, response: ["Why do you think you are $1?", "How long have you been $1?"] },
            { pattern: /i feel (.*)/, response: ["Why do you feel $1?", "What do you think caused you to feel $1?"] },
            { pattern: /i need (.*)/, response: ["Why do you need $1?", "What would happen if you didn't get $1?"] },
            { pattern: /i want (.*)/, response: ["Why do you want $1?", "What would happen if you got $1?"] },
            { pattern: /i think (.*)/, response: ["Why do you think $1?", "How long have you thought that $1?"] },
            { pattern: /yes/i, response: ["I see.", "I understand."] },
            { pattern: /no/i, response: ["Why not?", "Are you sure?"] },
            { pattern: /(.*)/, response: ["Can you tell me more?", "I'm listening.", "Please continue."] }
          ],
          //some processing code here, look at this site's source code if you want to see it
        ```
        As you can see from above, the general form of the program is a regular expression and a list of responses.
        Pretty simple. In order to scale, I just needed to make more of the pattern/response pairs. 
        I got ChatGPT to generate about 500 of them before I reached the rate limit.

        #### Second Stage: GPT-2
        To get to 1,000,000 responses, I fine-tuned gpt-2 on the 500 patterns and responses made by ChatGPT.
        
        (Note: I did this on February 28. On March 1st,
        literally the next day, openAI announced the ChatGPT API. I will definitely have to revisit this project,
        using ChatGPT the whole way). 

        About 50% of these generated
        patterns and responses had syntax errors and were unusable. I ended up using [tree-sitter](https://tree-sitter.github.io/tree-sitter/)
        to parse the javascript and extract the patterns and responses. It worked really well because tree-sitter 
        is pretty tolerant of errors, so an error in one pattern/response pair wouldn't cause the whole file to fail to parse.
        I had to generate about 2,000,000 patterns and responses before I had enough to get to 1,000,000 usable ones.

        In the end I generated about 1,000,000 usable responses and about 400,000 patterns. Most patterns have only 1 response, 
        but some have more. Like /dairy/ had 600 responses for no reason, (it wasn't even in the fine-tuned data).
        
        Then came the boring part of cleaning up the generated responses. It's a known fact that GPT-2 can 
        be very very naughty. 
        
        After that, I had to write the code to speed up the program. 350,000 regexes were 
        a bit too slow. Fortunately, 99% of the pattens were of this form: 
        ```javascript 
        const pattern = /some words to match (.*)/i
        ```
        A matching substring, followed by a catch all. So, instead of doing a regex match for every pattern, I just
        constructed a tree of the words to locate matching strings. Here is an example:

        ```javascript
        //Instead of this
        const regex1 = /I feel sad (.*)/i;
        const regex2 = /I feel (.*)/i;
        const regex3 = /I feel angry(.*)/i;

        //I do this
        const tree = {
          "I": {
            tree: {
              "feel": {
                tree: {
                    "sad": {
                      responses: [regex1],
                    }
                  "angry": {
                    responses: [regex3],
                  }
                },
                response: [regex2]
              }
            }
          }
        }
        ```
        Combined with a few more tricks for size, I compressed the JSON
        down to about 5MB gzipped, and it's much faster (win-win)

        That's about it for the code.

        ### AI usage
        Other than the above, I didn't use any other A.I.'s. I probably should
        have used a generative model to make Spudmund Freud, but I had an image 
        in my mind of what I wanted it to look like. So, I just made in 
        blender myself and I got the textures (including the library and the chair)
        from textures.com

        ### Conclusion 
        Did it work? Somewhat. Scaling up the number of responses did drastically improve the
        pattern match rate. Whatever you had to say, there is a good chance it has a response for it.
        The problem is that the responses are not very good. I think GPT-2 is the weakest link here,
        it's just not very good at generating coherent responses. For the next iteration, I will
        definitely use ChatGPT to generate the responses.

        Also, GPT-2 would often generate a response 
        that ends in a question like "Would you like to know more?", but the implementation has absolutely 
        no memory, so it would never follow-up. In the data I fine-tuned it on, there were no responses
        that ended in a question, so this is a problem with GPT-2.

        Finally, a lot of the responses follow a set pattern like "$BLANK is a popular gift", which is
        definitely a symptom of over-training. The problem was, when I under-trained it, it didn't
        produce topical responses, so it's a balancing act.

        ### Bonus 
        Following the psychology theme, I gave the A.I. a complex,
        see if you can find it.
        



    footer(class="box")
      :plain-markdown
        copyright 2023 Late for Dinner Studios, LLC 
        ### Credits
        The game (including code and graphics) was made by Michael Mulet. You can find the source code on 
        [GitHub](https://github.com/mmulet/ai-by-ai).

      p(style="font-family: chikarego2") The font 
        a(href="https://www.pentacom.jp/pentacom/bitfontmaker2/gallery/?id=3780") ChiKareGo2 by Giles Booth 
        | is licensed under Creative Commons Attribution
      p The following fonts are in the public domain
      ul 
        li(style="font-family: karen2mono") 
          a(href="http://www.pentacom.jp/pentacom/bitfontmaker2/gallery/?id=298") karen2mono by Paul Spades
        li(style="font-family: trueitalicWIP")
          a(href="https://www.pentacom.jp/pentacom/bitfontmaker2/gallery/?id=372") trueitalicWIP by Paul Spades
  script(src="/code/index.js")
